/// @author Samuel Parent, Blake Freer
/// @date November 2024

// WARNING: DO NOT MODIFY THIS CODE. THIS IS AN AUTOGENERATED FILE.

/// @todo support enums
/// @todo clang format

// clang-format off

#pragma once

#include <cstdint>
#include "shared/comms/can/msg.hpp"

namespace generated::can {

{% set bus = bus_name+"Bus" %}
class {{ bus }};

/* -------------------- ENUMS -------------------- */
{% for msg in tx_msgs + rx_msgs %}
    {% for sig in msg.signals %}
        {% if sig.choices %}  
enum class {{ sig.name }} {
            {% for value, name in sig.choices.items() | reverse %}
    {{ name }} = {{ value }},
            {% endfor %}
};
        {% endif %}
    {% endfor %}
{% endfor %}

/* -------------------- RX MESSAGES -------------------- */

{% for msg in rx_msgs %}
{% set class_name = "Rx"+msg.name %}
class {{ class_name }} {
public:
    {% for sig in msg.signals %}
    inline {{ signal_types[msg][sig] }} {{ sig.name }}() const { return {{ sig.name | camel_to_snake }}_; }
    {% endfor %}

private:
    {% for sig in msg.signals %}
    {{ signal_types[msg][sig] }} {{ sig.name | camel_to_snake }}_;
    {% endfor %}

    // Timestamp is platform dependent. See mcal/PLATFORM/periph/can
    uint32_t timestamp_;

    constexpr static uint32_t id = {{ msg.frame_id }};
    constexpr static uint8_t data_length = {{ msg.length }};


    friend class {{ bus }};
    
    // Only {{ bus }} can construct this class which guarantees the data came from the CAN line.
    {{ class_name }}(shared::can::RawMessage raw_msg, uint32_t timestamp) : timestamp_(timestamp) {
        {% for sig in msg.signals %}
        {% set T = temp_signal_types[msg][sig] %}
        {{ T }} temp_{{ sig.name | camel_to_snake }} = 0;
        {% set masks, shifts = unpack_info[msg][sig] %}
        {% for mask in masks %}
            {% set i = loop.index0 %}
            {% set shift = shifts[i] %}
            {% if mask != 0 %}
                {% if T == "bool" %}
        temp_{{ sig.name | camel_to_snake }} = raw_msg.data[{{ i }}] & {{mask | decimal_to_hex}};
                {% else %}
                    {% if shift >= 0 %}
        temp_{{ sig.name | camel_to_snake }} |= static_cast<{{T}}>(raw_msg.data[{{ i }}] & {{mask | decimal_to_hex}}) << {{ shift }};
                    {% else %}
        temp_{{ sig.name | camel_to_snake }} |= static_cast<{{T}}>(raw_msg.data[{{ i }}] & {{ mask | decimal_to_hex }}) >> {{ -shift }};
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
        {% if sig.scale == 1 and sig.offset == 0 %}
        {{ sig.name | camel_to_snake }}_ = temp_{{ sig.name | camel_to_snake }};
        {% else %}
        {{ sig.name | camel_to_snake }}_ = static_cast<{{ T }}>(static_cast<double>(temp_{{ sig.name | camel_to_snake }}) * {{ sig.scale }} + {{ sig.offset }});
        {% endif %}
        
        {% endfor %}
    }
    {{ class_name }}() = delete;
};


{% endfor %}

/* -------------------- TX MESSAGES -------------------- */

{% for msg in tx_msgs %}
{% set class_name = "Tx"+msg.name %}
class {{ class_name }} {
public:
    {% for sig in msg.signals %}
    {{ signal_types[msg][sig] }} {{ sig.name | camel_to_snake }};
    {% endfor %}

    shared::can::RawMessage pack() const {
        uint8_t data[{{msg.length}}] = {};

        // @todo clamp data

        // temporary signal variables
        {% for sig in msg.signals %}
        {% set sig_var = sig.name | camel_to_snake %}
        {% set type = temp_signal_types[msg][sig] %}
        {{ type }} temp_{{ sig.name | camel_to_snake }} = static_cast<{{ type }}>(static_cast<double>({{ sig_var }} - k{{sig.name}}Offset ) / k{{sig.name}}Scale);
        {% endfor %}

        {% for sig in msg.signals %}
        {% set masks, shifts = pack_info[msg][sig] %}
        {% set sig_var = sig.name | camel_to_snake %}
        {% set sig_var_type = signal_types[msg][sig] %}
        {% for mask in masks %}
            {% set i = loop.index0 %}
            {% set shift = shifts[i] %}
            {% if mask != 0 %}
                {% if shift >= 0 %}
        data[{{ i }}] |= shared::can::pack_right_shift(temp_{{ sig_var }}, {{ shift }}U, {{ mask | decimal_to_hex }}U);
                {% else %}
        data[{{ i }}] |= shared::can::pack_left_shift(temp_{{ sig_var }}, {{ -(shift) }}U, {{ mask | decimal_to_hex }}U);
                {% endif %}
            {% endif %}
        {% endfor %}
        {% endfor %}

        return shared::can::RawMessage(id, extended_frame, data_length, data);
    }

private:
    static constexpr uint32_t id = {{ msg.frame_id }};
    static constexpr uint8_t data_length = {{ msg.length }};
    constexpr static uint8_t extended_frame = {{ msg.is_extended_frame | lower }};

    // Signal properties
    {% for sig in msg.signals %}
    {% set sig_var = sig.name | camel_to_snake %}
    {% set sig_var_type = signal_types[msg][sig] %}
    static constexpr double k{{ sig.name }}Scale = {{ sig.scale }};
    static constexpr double k{{ sig.name }}Offset = {{ sig.offset }};
    {% endfor %}
};


{% endfor %}

}  // namespace generated::can

// clang-format on