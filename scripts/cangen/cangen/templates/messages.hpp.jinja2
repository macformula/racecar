/// @author Samuel Parent, Blake Freer
/// @date November 2024

// WARNING: DO NOT MODIFY THIS CODE. THIS IS AN AUTOGENERATED FILE.

/// @todo support enums
/// @todo clang format

// clang-format off

#pragma once

#include <cmath>
#include <cstdint>
#include "can/msg.hpp"

namespace generated::can {

{% set bus = bus_name+"Bus" %}
class {{ bus }};

/* --------------------- CONSTANTS --------------------- */

const uint64_t k{{ bus_name|capitalize }}DbcHash = {{ dbc_hash | hex }}U;

/* -------------------- RX MESSAGES -------------------- */

{% for msg in rx_msgs %}
{% set class_name = "Rx"+msg.m.name %}
class {{ class_name }} {
public:
    {% for sig in msg.signals | selectattr("is_enum") %}
    enum class {{ sig.type }} {
        {% for value, name in sig.s.choices.items() %}
        {{ name }} = {{ value }},
        {% endfor %}
    };
    {% endfor %}

    {% for sig in msg.signals %}
    inline {{ sig.type }} {{ sig.s.name }}() const { return {{ sig.name }}_; }
    {% endfor %}

    inline const macfe::can::RawMessage& Raw(void) { return raw_message; }

private:
    {% for sig in msg.signals %}
    {{ sig.type }} {{ sig.name }}_;
    {% endfor %}

    macfe::can::RawMessage raw_message;

    // Timestamp is platform dependent. See mcal/PLATFORM/periph/can
    uint32_t timestamp_;

    constexpr static uint32_t id = {{ msg.m.frame_id }};
    constexpr static uint8_t data_length = {{ msg.m.length }};

    friend class {{ bus }};
    
    // Only {{ bus }} can construct this class which guarantees the data came from the CAN line.
    {{ class_name }}(macfe::can::RawMessage raw_msg, uint32_t timestamp) :  raw_message(raw_msg), timestamp_(timestamp) {
        {% for sig in msg.signals %}
        {% set T = sig.raw_type %}
        {{ T }} temp_{{ sig.name }} = 0;
            {% for ms in sig.masks_shifts %}
        temp_{{ sig.name }} |= static_cast<{{ T }}>(raw_msg.data[{{ ms.byte }}] & {{ ms.mask | hex}})
                {%- if ms.shift > 0 %} << {{ ms.shift }}
                {%- elif ms.shift < 0 %} >> {{ -ms.shift }}
                {%- endif %};
            {% endfor %}
        {% set missing_bits = sig.raw_type_bits - sig.s.length %}
        {% if sig.s.is_signed and missing_bits > 0 %}
        temp_{{ sig.name }} = static_cast<{{ T }}>(temp_{{ sig.name }} << {{ missing_bits }}) >> {{ missing_bits }}; // sign extend
        {% endif %}
        {% if sig.s.scale == 1 and sig.s.offset == 0 %}
        {{ sig.name }}_ = static_cast<{{ sig.type }}>(temp_{{ sig.name }});
        {% else %}
        {{ sig.name }}_ = static_cast<{{ sig.type }}>(static_cast<double>(temp_{{ sig.name }}) * {{ sig.s.scale }} + {{ sig.s.offset }});
        {% endif %}
        
        {% endfor %}
    }
    {{ class_name }}() = delete;
};


{% endfor %}

/* -------------------- TX MESSAGES -------------------- */

{% for msg in tx_msgs %}
{% set class_name = "Tx"+msg.m.name %}
class {{ class_name }} {
public:
    {% for sig in msg.signals | selectattr("is_enum") %}
    enum class {{ sig.type }} {
        {% for value, name in sig.s.choices.items() %}
        {{ name }} = {{ value }},
        {% endfor %}
    };
    {% endfor %}

    {% for sig in msg.signals %}
    {{ sig.type }} {{ sig.name }};
    {% endfor %}

    macfe::can::RawMessage pack() const {
        uint8_t data[{{msg.m.length}}] = {};

        // @todo clamp data

        {% for sig in msg.signals %}
            {% set T = sig.raw_type %}
            {% if sig.s.offset == 0 and sig.s.scale == 1 %}
        {{ T }} temp_{{ sig.name }} = static_cast<{{ T }}>({{ sig.name }});
            {% else %}
        {{ T }} temp_{{ sig.name }} = static_cast<{{ T }}>(std::round(({{ sig.name }} - {{ sig.s.offset }} ) / {{ sig.s.scale }}));
            {% endif %}
            {% for ms in sig.masks_shifts %}
                {% if ms.shift >= 0 %}
        data[{{ ms.byte }}] |= (temp_{{ sig.name }} >> {{ ms.shift }}) & {{ ms.mask | hex }};
                {% else %}
        data[{{ ms.byte }}] |= (temp_{{ sig.name }} << {{ -ms.shift }}) & {{ ms.mask | hex }};
                {% endif %}
            {% endfor %}

        {% endfor %}

        return macfe::can::RawMessage(id, extended_frame, data_length, data);
    }

private:
    static constexpr uint32_t id = {{ msg.m.frame_id }};
    static constexpr uint8_t data_length = {{ msg.m.length }};
    constexpr static uint8_t extended_frame = {{ msg.m.is_extended_frame | lower }};
};


{% endfor %}

}  // namespace generated::can

// clang-format on
